# %%
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import cv2
import random


# %%
import tensorflow as tf
from tensorflow.keras import layers, models

# Define the CNN architecture
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.BatchNormalization(),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.BatchNormalization(),

    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.BatchNormalization(),

    layers.Conv2D(256, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.BatchNormalization(),

    layers.Flatten(),
    layers.Dropout(0.5),  # Dropout to prevent overfitting
    layers.Dense(128, activation='relu'),
    layers.Dense(4, activation='softmax')  # Output layer
])


# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Print model summary
model.summary()

# %% Initialize ImageDataGenerators for training and testing datasets
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.4,   # Increased shear range
    zoom_range=0.3,    # Increased zoom range
    horizontal_flip=True,
    brightness_range=[0.7, 1.3],  # Slightly broader brightness range
    rotation_range=45,   # Increased rotation range
    width_shift_range=0.3,  # Increased width shift
    height_shift_range=0.3  # Increased height shift
)


test_datagen = ImageDataGenerator(rescale=1./255)

# %% Load the data from directories
train_generator = train_datagen.flow_from_directory(
    'C:/Users/asus/OneDrive/Desktop/brain tumor/Training',  # Update with your train data path
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    'C:/Users/asus/OneDrive/Desktop/brain tumor/Testing',   # Update with your test data path
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)
# %%
from tensorflow.keras.callbacks import ReduceLROnPlateau

lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=1, min_lr=1e-6)

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=50,  # Increase number of epochs
    validation_data=test_generator,
    validation_steps=test_generator.samples // test_generator.batch_size,
    callbacks=[lr_scheduler]
)

# %%
import matplotlib.pyplot as plt

# Plot training & validation accuracy values
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
# %%
test_loss, test_acc = model.evaluate(test_generator)
print(f"Test accuracy: {test_acc}")
# %%
model.save('brain_tumor_model.h5')


# %%
from tensorflow.keras.models import load_model
import cv2
import numpy as np

# Load the saved model
model = load_model('brain_tumor_model.h5')

# Load a new MRI image for prediction
image = cv2.imread('C:/Users/asus/OneDrive/Desktop/brain tumor/Testing/meningioma/Te-me_0021.jpg')
image = cv2.resize(image, (224, 224))  # Resize the image
image = np.expand_dims(image, axis=0)  # Add batch dimension
image = image / 255.0  # Normalize the image

# Predict the class
prediction = model.predict(image)
predicted_class = np.argmax(prediction, axis=1)

# Map the predicted class index to the class name
class_names = ['Glioma', 'Meningioma', 'No Tumor', 'Pituitary']
print(f"The predicted class is: {class_names[predicted_class[0]]}")


# %%
import tkinter as tk
from tkinter import filedialog
from tensorflow.keras.models import load_model
import cv2
import numpy as np
from PIL import Image, ImageTk  # Importing PIL for image handling

# Load the trained model
model = load_model('brain_tumor_model.h5')

# Function to predict the tumor type
def predict_tumor():
    image_path = entry_image_path.get()  # Get the image path from the input field
    if not image_path:
        result_label.config(text="Please upload an image.")
        return

    image = cv2.imread(image_path)
    image = cv2.resize(image, (224, 224))  # Resize the image to match model input
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    image = image / 255.0  # Normalize the image

    # Predict the class
    prediction = model.predict(image)
    predicted_class = np.argmax(prediction, axis=1)

    # Map the predicted class index to the class name
    class_names = ['Glioma', 'Meningioma', 'No Tumor', 'Pituitary']
    result_label.config(text=f"The predicted class is: {class_names[predicted_class[0]]}")

# Function to open the file dialog and select an image
def upload_image():
    file_path = filedialog.askopenfilename(title="Select an Image", filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.bmp")])
    if file_path:
        entry_image_path.delete(0, tk.END)  # Clear the previous text
        entry_image_path.insert(0, file_path)  # Insert the selected file path
        
        # Display the image
        display_image(file_path)

# Function to display the selected image
def display_image(image_path):
    # Open the image using PIL
    uploaded_image = Image.open(image_path)
    uploaded_image = uploaded_image.resize((300, 300))  # Resize for display purposes
    uploaded_image_tk = ImageTk.PhotoImage(uploaded_image)

    # Update the label to show the image
    image_label.config(image=uploaded_image_tk)
    image_label.image = uploaded_image_tk  # Keep a reference to the image to prevent garbage collection

# Create the main window
window = tk.Tk()
window.title("Brain Tumor Prediction")
window.geometry("500x500")  # Set the window size

# Label for the title
title_label = tk.Label(window, text="Brain Tumor Prediction", font=("Helvetica", 18, "bold"))
title_label.pack(pady=20)

# Entry field to display the image path
entry_image_path = tk.Entry(window, width=40)
entry_image_path.pack(pady=10)

# Button to upload an image
upload_button = tk.Button(window, text="Upload Image", command=upload_image, bg="blue", fg="white", font=("Helvetica", 12))
upload_button.pack(pady=10)

# Label to display the uploaded image
image_label = tk.Label(window)
image_label.pack(pady=10)

# Button to trigger prediction
predict_button = tk.Button(window, text="Predict Tumor", command=predict_tumor, bg="green", fg="white", font=("Helvetica", 12))
predict_button.pack(pady=10)

# Label to display the prediction result
result_label = tk.Label(window, text="", font=("Helvetica", 14))
result_label.pack(pady=20)

# Run the Tkinter main loop
window.mainloop()

# %%
